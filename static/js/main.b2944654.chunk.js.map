{"version":3,"sources":["Infobox.js","LineGraph.js","util.js","Map.js","Table.js","Prediction.js","PredModal.js","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","active","isRed","checked","cases","total","props","Card","className","onClick","CardContent","Typography","color","options","elements","point","radius","legend","display","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","buildChartData","data","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","datacol","backgroundColor","borderColor","length","datasets","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","prettyPrintStat","stat","Map","countries","center","zoom","TileLayer","attribution","url","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","Prediction","position","top","left","transform","width","maxWidth","bgcolor","border","borderRadius","boxShadow","p","PredModal","React","open","setOpen","Button","fontWeight","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Box","sx","id","textAlign","mb","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","mapZoom","setMapZoom","name","iso2","sortedData","getCountriesData","onCountryChange","Event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2944654.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./Infobox.css\"\r\n\r\nfunction Infobox({ title,active,isRed , checked, cases, total ,...props }) {\r\n  return (\r\n    <Card className={`infobox ${active && \"infobox_selected\"} ${checked && \"infobox_dark\"} ${isRed && \"infobox_red\"}`} onClick={props.onClick} >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className=\"infobox_title \">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infobox_cases ${!isRed && \"infobox_green\"}`}>{cases}</h2>\r\n        <Typography className=\"infobox_total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Infobox;\r\n","import numeral from \"numeral\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nconst options = {\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  legend: {\r\n    display: false,\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nlet prev = 400000;\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y:\r\n          data[casesType][date] - lastDataPoint > 0\r\n            ? data[casesType][date] - lastDataPoint\r\n            : prev,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=150`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          console.log(chartData);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n  let datacol = {\r\n    backgroundColor: \"rgba(204,16,52,0.5)\",\r\n    borderColor: \"#CC1034\",\r\n    data: data,\r\n  };\r\n\r\n  return (\r\n    <div className={\"check\" && props.className }>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [datacol],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nimport React from \"react\";\r\n\r\nconst casesTypeColors = {\r\n  cases:{\r\n    hex:\"#CC1034\",\r\n    multiplier:200,\r\n  },\r\n  recovered:{\r\n    hex:\"#7dd71d\",\r\n    multiplier:200,\r\n  },\r\n  deaths:{\r\n    hex:\"#fb4443\",\r\n    multiplier:1200,\r\n  }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info_container\">\r\n        <div className=\"info_flag\" style={{backgroundImage :  `url(${country.countryInfo.flag})`}} >\r\n        </div>\r\n          \r\n          <div className=\"info_name\">{country.country}</div>\r\n          <div className=\"info_confirmed\">Cases:{numeral(country.cases).format(\"0,0\")}</div>\r\n          <div className=\"info_recovered\">Recovered:{numeral(country.recovered).format(\"0,0\")}</div>\r\n          <div className=\"info_deaths\">Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n  export const prettyPrintStat = (stat)=>(\r\n    stat?`+${numeral(stat).format('0,0a')}`:1\r\n  )","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\"\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap zoom={zoom} center={center} >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        ></TileLayer>\r\n        {showDataOnMap(countries,casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nconst options = {\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  legend: {\r\n    display: false,\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"DD/MM/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nlet cases=[\r\n  {\r\n    x: \"05-12-2021\",\r\n    y: 9054\r\n  },\r\n  {\r\n    x: \"06-12-2021\",\r\n    y: 8000\r\n  },\r\n  {\r\n    x: \"07-12-2021\",\r\n    y: 9000\r\n  },\r\n  {\r\n    x: \"08-12-2021\",\r\n    y: 9584\r\n  },\r\n  {\r\n    x: \"09-12-2021\",\r\n    y: 7562\r\n  },\r\n  {\r\n    x: \"10-12-2021\",\r\n    y: 10000\r\n  },\r\n  {\r\n    x: \"11-12-2021\",\r\n    y: 7000\r\n  },\r\n  {\r\n    x: \"12-12-2021\",\r\n    y: 7243\r\n  },\r\n  {\r\n    x: \"13-12-2021\",\r\n    y: 6798\r\n  },\r\n  {\r\n    x: \"14-12-2021\",\r\n    y: 7354\r\n  },\r\n  {\r\n    x: \"15-12-2021\",\r\n    y: 5909\r\n  },\r\n  {\r\n    x: \"16-12-2021\",\r\n    y: 7054\r\n  },\r\n  {\r\n    x: \"17-12-2021\",\r\n    y: 8000\r\n  },\r\n  {\r\n    x: \"18-12-2021\",\r\n    y: 9000\r\n  },\r\n  {\r\n    x: \"19-12-2021\",\r\n    y: 6500\r\n  },\r\n  {\r\n    x: \"20-12-2021\",\r\n    y: 7317\r\n  },\r\n  {\r\n    x: \"21-12-2021\",\r\n    y: 7397\r\n  },\r\n  {\r\n    x: \"22-12-2021\",\r\n    y: 7477\r\n  },\r\n  {\r\n    x: \"23-12-2021\",\r\n    y: 7557\r\n  },\r\n  {\r\n    x: \"24-12-2021\",\r\n    y: 7637\r\n  },\r\n  {\r\n    x: \"25-12-2021\",\r\n    y: 7716\r\n  },\r\n  {\r\n    x: \"26-12-2021\",\r\n    y: 8000\r\n  },\r\n  {\r\n    x: \"27-12-2021\",\r\n    y: 6547\r\n  },\r\n  {\r\n    x: \"28-12-2021\",\r\n    y: 6555\r\n  },\r\n  {\r\n    x: \"29-12-2021\",\r\n    y: 9800\r\n  },\r\n  {\r\n    x: \"30-12-2021\",\r\n    y: 8700\r\n  },\r\n  {\r\n    x: \"31-12-2021\",\r\n    y: 9870\r\n  }\r\n ]\r\nfunction Prediction() {\r\n  let datacol = {\r\n    backgroundColor: \"rgba(204,16,52,0.5)\",\r\n    borderColor: \"#CC1034\",\r\n    data: cases,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [datacol],\r\n          }}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Prediction;\r\n","import Backdrop from \"@mui/material/Backdrop\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport React from \"react\";\r\nimport Prediction from \"./Prediction\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"75vw\",\r\n  maxWidth: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"none\",\r\n  borderRadius: \"10px\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst PredModal = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return (\r\n    <div>\r\n      \r\n        <Button  color=\"error\" style={{ width: \"50vw\" }} onClick={handleOpen}>\r\n          <span style={{fontWeight:\"bold\"}}> Covid prediction in India </span>\r\n        </Button>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <Box sx={style}>\r\n            <Typography\r\n              id=\"transition-modal-description\"\r\n              sx={{ textAlign: \"center\", mb: \"20px\" }}\r\n            >\r\n              <h3 style={{ color: \"grey\" }}>Covid Prediction in India</h3>\r\n            </Typography>\r\n            <Prediction />\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredModal;\r\n","import {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Infobox from \"./Infobox\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport PredModal from \"./PredModal\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 23.0707, lng: 80.0982 });\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapZoom, setMapZoom] = useState(3);\n  useEffect(() => {\n    fetch(`https://disease.sh/v3/covid-19/all`)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (Event) => {\n    const countryCode = Event.target.value;\n    const url =\n      countryCode === \"Worldwide\"\n        ? `https://disease.sh/v3/covid-19/all`\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        if (countryCode === \"Worldwide\") {\n          setCountryInfo(data);\n          setMapCenter([20.59, 78.96]);\n          setMapZoom(4);\n          setCountry(countryCode);\n        } else {\n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n          setCountry(countryCode);\n        }\n      });\n  };\n  return (\n    <div className={`app `}>\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>Covid 19 Tracker</h1>\n          <div className=\"app_headerControls\">\n            <FormControl className={`app_dropdown`}>\n              <Select\n                variant=\"outlined\"\n                value={country}\n                onChange={onCountryChange}\n              >\n                <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n        </div>\n        <div className=\"pred\">\n          {/* Prediction system */}\n          <PredModal />\n        </div>\n        <div className=\"app_stats\">\n          <Infobox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <Infobox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <Infobox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h2 className=\"app_graphTitle2\">Live cases by country</h2>\n          <Table countries={tableData} />\n          <h2 className=\"app_graphTitle\">Worldwide New {casesType}</h2>\n          <div className=\"whitebg app_graph\">\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}